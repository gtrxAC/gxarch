Grammar {
  Program = Instruction*

  space += ";" (~"\n" any)* -- comment

  value =
    "0x" hexDigit+             -- hex
  | "0b" ("0" | "1")+          -- bin
  | digit+                     -- dec
  | k<"lo"> "(" address ")"    -- lo
  | k<"hi"> "(" address ")"    -- hi
  | ident ~":"                 -- label

  address =
    "0x" hexDigit+    -- hex
  | "0b" ("0" | "1")+ -- bin
  | digit+            -- dec
  | ident ~":"        -- label

  data =
  | ident ~":"  -- label
  | value
  | string

  register =
    "%" (digit+ | "h" | "r" | "H" | "R")  -- reg
  | ident                                 -- ident
  | "(" register ":" value ")"            -- val

  Instruction =
    "{" Instruction* "}"                         -- block
  | ident ":"                                    -- label
  | k<"dat"> ListOf<data, ",">                   -- dat
  | k<"val"> ident value                         -- val
  | k<"addr"> ident address                      -- addr
  | k<"reg"> ident register                      -- reg
  | k<"nop">                                     -- nop
  | k<"set"> register value                      -- set
  | k<"ld"> register address                     -- ld
  | k<"ldi"> register register                   -- ldi
  | k<"st"> register address                     -- st
  | k<"sti"> register register                   -- sti
  | k<"add"> register register register          -- add
  | k<"sub"> register register register          -- sub
  | k<"mul"> register register register          -- mul
  | k<"div"> register register register          -- div
  | k<"and"> register register register          -- and
  | k<"or"> register register register           -- or
  | k<"xor"> register register register          -- xor
  | k<"eq"> register register register           -- eq
  | k<"lt"> register register register           -- lt
  | k<"gt"> register register register           -- gt
  | k<"jmp"> address                             -- jmp
  | k<"cj"> register address                     -- cj
  | k<"js"> address                              -- js
  | k<"cjs"> register address                    -- cjs
  | k<"ret">                                     -- ret
  | k<"dw"> register register register register  -- dw
  | k<"at"> register register                    -- at
  | k<"key"> register register                   -- key
  | k<"snd"> register register register register -- snd
  | k<"end">                                     -- end

  string = "\"" stringpart* "\""

  stringpart =
    (~"\"" ~"\n" ~"\\" any) -- char
  | "\\n"                   -- lf
  | "\\r"                   -- cr
  | "\\t"                   -- tab
  | "\\0"                   -- nul
  | "\\\\"                  -- bs
  | "\\\""                  -- quot

  ident = identstart identpart*
  identstart = letter | "_"
  identpart = alnum | "_"
  k<name> = name ~identpart
}