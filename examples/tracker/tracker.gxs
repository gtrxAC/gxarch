; Tracker for gxarch
; Create music using gxarch's 4 audio channels
; Controls: arrow keys to move, 0-9 A-F to input, P to play, Insert to change
;           playback speed, +/- to add/remove pages
; Date: 2022-02-22
; Author: gtrxAC

dat main      ; set program entry point
dat 8, 8, 12  ; set screen clear color (almost black)
dat 1         ; supports save file

val PRINT_CHARSPERLINE 32
val PRINT_WIDTH 4
val PRINT_HEIGHT 8
.include std/common.gxs
.include std/print.gxs

; use "cj (reg) return" to quickly return from any subroutine
return: ret

addr framecount 0xE000
addr keyflag 0xE001     ; used to prevent key repeating
addr curkey 0xE002      ; last pressed key (0 if none or if key is held down)

addr curpage 0xE003
addr pagecount 0xE004

addr cursory 0xE005
addr cursorch 0xE006
addr cursorx 0xE007

addr oldx 0xE008      ; when in playing mode, editmode cursor position is
addr oldch 0xE009     ; temporarily stored here
addr oldy 0xE00A
addr oldpage 0xE00B

addr playing 0xE00C

val PLAYBACK_SPEED 16  ; how many frames between each line when playing back the
                       ; track (you can also press Insert to speed up)
                       ; note: using non power of two numbers for playback speed
                       ;       has skipping issues because frame count is stored
                       ;       as 8-bit

val PAGE_LENGTH 20    ; how many lines one page has (120 screen height available
                      ; / 6 font height = 20)
val LINE_LENGTH 12    ; how many bytes one line has
val CHANNEL_COUNT 4   ; how many channels one line has
val CHANNEL_LENGTH 3  ; how many bytes one channel has

val MAX_PAGES 15     ; SRAM can fit 3840 bytes, one page is 20 × 12 bytes
                     ; note: each page is stored as 256 bytes because it's
                     ;       simpler to work with, only need to change the high
                     ;       byte of addresses (if each page was stored as 20 ×
                     ;       12 = 240 bytes, 16 pages would be possible)

val DEFAULT_PAGES 4

freqstr: dat "FREQ"
suststr: dat "SUST"
decaystr: dat "DECAY"
playstr: dat "Z["      ; note: "Z[" in the font is a musical note

.include examples/tracker/hex2int4b.gxs  ; hex (0-9 a-f A-F) to int (0x00-0x0F)
.include examples/tracker/int2hex4b.gxs  ; int to hex string conversion
.include examples/tracker/pos2scr.gxs    ; cursor position to screen coords
.include examples/tracker/pos2addr.gxs   ; cursor position to memory address

.include examples/tracker/cursor.gxs     ; cursor movement subs (editmode)
.include examples/tracker/drawhud.gxs    ; misc draw routines
.include examples/tracker/draw.gxs       ; track drawing
.include examples/tracker/input.gxs      ; user input, some input subroutines
.include examples/tracker/play.gxs       ; playback and playmode cursor movement

main:
	st (%0:DEFAULT_PAGES) pagecount

loop:
	ld %1 playing
	cjs %1 play

	js input
	js drawhud
	js draw

	ld %1 framecount  ; next frame (used for playback timing)
	add %1 (%0:1) %1
	st %1 framecount
	end
	jmp loop