; Circle for gxarch
; Circle drawing using Bresenham's circle algorithm
; Ported from http://rosettacode.org/wiki/Bitmap/Midpoint_circle_algorithm#D
; Date: 2021-12-31
; Author: gtrxAC

dat main

radstr: dat "Radius: 000px"
helpstr: dat "Use arrow keys to change radius"

addr FMTRADSTR 0x000A  ; address of "000" in radstr, for int2str formatting

val PRINT_CHARSPERLINE 32
val PRINT_WIDTH 4
val PRINT_HEIGHT 8
.include std/common.gxs
.include std/print.gxs
.include std/int2str.gxs

; ______________________________________________________________________________
;
;  Circle drawing algorithm
;  I don't really know how this works, I just blindly ported it
;
;  Arguments:
;    %20 = X of center
;    %21 = Y of center
;    %22 = radius
;
;  Uses registers:
;    %23-27 = variables
;    %28-29 = immediates
; ______________________________________________________________________________
;
circle: {
	reg x0 arg0
	reg y0 arg1
	reg rad arg2
	reg f %23
	reg ddfX %24
	reg ddfY %25
	reg x %26
	reg y %27
	reg imm4 %28
	reg imm5 %29

	set %0 0        ; set up immediate values
	set %1 1        ; %28 will be another immediate
	set %2 2
	set %3 254      ; unsigned -2
	dw %0 %0 %1 %1

	sub %1 rad f
	set ddfX 1
	mul %3 rad ddfY
	set x 0
	.mov rad y

	add y0 rad imm4
	at x0 imm4
	sub y0 rad imm4
	at x0 imm4
	add x0 rad imm4
	at imm4 y0
	sub x0 rad imm4
	at imm4 y0

circleloop:
	set imm4 129               ; original checks if >= 0 but signed numbers not supported
	.ltjs f imm4 circleifstmt  ; so we're checking if < 129 (screen size)

	add x %1 x
	add ddfX %2 ddfX
	add f ddfX f

	; we don't use macros in these plot commands so %29 is safe to use
	; https://github.com/gtrxAC/gxarch/wiki/Beginner-Tips#register-management
	add x0 x imm4
	add y0 y imm5
	at imm4 imm5
	sub x0 x imm4
	at imm4 imm5
	add x0 x imm4
	sub y0 y imm5
	at imm4 imm5
	sub x0 x imm4
	at imm4 imm5
	add x0 y imm4
	add y0 x imm5
	at imm4 imm5
	sub x0 y imm4
	at imm4 imm5
	add x0 y imm4
	sub y0 x imm5
	at imm4 imm5
	sub x0 y imm4
	at imm4 imm5

	.ltj x y circleloop

circleifstmt:
	sub y %1 y
	add ddfY %2 ddfY
	add f ddfY f
	ret
}

; ______________________________________________________________________________
;
;  Update loop
;
;  %4 = current radius
; ______________________________________________________________________________
;
main: {
	reg rad %4
	set %4 30   ; set initial radius value to 30px

loop:
	set %0 K_LEFT     ; left/down arrow keys: decrease radius
	key %0 %0
	set %1 K_DOWN
	key %1 %1
	or %0 %1 %2
	cjs %2 decradius

	set %0 K_RIGHT    ; right/up arrow keys: increase radius
	key %0 %0
	set %1 K_UP
	key %1 %1
	or %0 %1 %2
	cjs %2 incradius
; ______________________________________________________________________________
;
;  Rendering loop
; ______________________________________________________________________________
;
draw:
	set arg0 64
	set arg1 64
	.mov rad arg2
	js circle

	.mov rad arg0            ; format current radius into radstr
	set arg1 hi(FMTRADSTR)
	set arg2 lo(FMTRADSTR)
	js int2str

	set arg0 hi(helpstr)  ; print strings
	set arg1 lo(helpstr)
	set arg2 0
	set arg3 0
	js print

	set arg0 hi(radstr)
	set arg1 lo(radstr)
	set arg2 0
	set arg3 8
	js print

	end
	jmp loop

; ______________________________________________________________________________
;
;  Input subroutines
;  Called when arrow keys are pressed
; ______________________________________________________________________________
;

incradius: 
	set %0 1
	add rad %0 rad
	ret

decradius:
	set %0 1
	sub rad %0 rad
	ret
}