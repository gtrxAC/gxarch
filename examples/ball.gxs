; Ball for gxarch
; Draws a bouncing ball on screen, which can be moved using the mouse
; Date: 2021-12-22
; Author: gtrxAC

datl main    ; set program entry point
dat 0, 0, 0  ; set screen clear color (black)
dat 0        ; doesn't support save file

include "std/common.gxs"

; Main memory is not used, all variables are stored in registers:
reg x %10      ; X/Y position (randomized at start)
reg y %11
reg dx %12     ; X/Y delta (how many pixels the ball moves each frame)
reg dy %13
reg REDGE %14  ; coordinates of screen right edge (constant 126)
reg BEDGE %15  ; coordinates of screen bottom edge (constant 118)
reg anim %16   ; current animation frame (changes when hitting edges)
reg _0 %17     ; constant 0
reg BSZ %18    ; ball size (constant 3)

main:
	; Generate random start position
	ld x RAND
	ld y RAND

	; RAND is 0-255, but screen is only 128 pixels, so divide by 2
	div x (%0:2) x
	div y %0 y

	set dx 1
	set dy 1
	set REDGE 126  ; screen edges are not same as screen resolution, because:
	set BEDGE 118  ; - if it were 128, the ball would be partially off screen
	               ;   when hitting the bottom and right edges
	               ; - if both X and Y were the same, the ball's movement would
	               ;   always be the same and very repetitive
	set BSZ 3

update:
	; Move ball to mouse position if mouse clicked
	ld %0 MOUSEL
	cjs %0 gotomouse

	add x dx x          ; ball X += X delta
	gtjs x REDGE right  ; if hit right edge, set delta X to -1 (255 unsigned)
	eqjs x _0 left      ; if hit left edge, set delta X to 1
	add y dy y          ; ball Y += Y delta
	gtjs y BEDGE down   ; if hit bottom edge, set delta Y to -1
	eqjs y _0 up        ; if hit top edge, set delta Y to 1

draw:
	dw anim _0 BSZ BSZ
	at x y
	end
	jmp update

; ______________________________________________________________________________
;
;  Subroutines
; ______________________________________________________________________________
;
right:
	set dx 255
	js nextframe
	ret

left:
	set dx 1
	js nextframe
	ret

down:
	set dy 255
	js nextframe
	ret

up:
	set dy 1
	; js nextframe  ; fall through so unnecessary
	; ret

; Move to the next ball animation frame and play a sound
nextframe:
	snd (%0:SND_SQUARE) (%1:96) (%2:1) (%3:32)
	add anim BSZ anim
	eqj anim (%1:24) resetframe
	ret

resetframe:
	set anim 0
	ret

gotomouse:
	ld x MOUSEX
	ld y MOUSEY
	ret