; Block Game for gxarch
; Move around in a blocky world and place or remove blocks
; Controls: WASD to move, left mouse to remove, right mouse to place, Z/X to switch block
; Date: 2021-11-18
; Author: gtrxAC

dat main

coordstr: dat "X:000 yY:000  Block:"  ; in the font, the lowercase y is the
                                      ; black border for the uppercase Y

val PRINT_CHARSPERLINE 32
val PRINT_WIDTH 4
val PRINT_HEIGHT 8
.include std/common.gxs
.include std/int2str.gxs
.include std/print.gxs

val WWIDTH 128     ; save RAM is 4K(0xFxxx) - 256(reserved 0xFFxx) = 3840 bytes
val WHEIGHT 30     ; we use the first 30 bytes of SRAM for variables, so 128 Ã— 30 world size
val BLOCKSIZE 10
val SPEED 2        ; player can move every SPEED frames (1 block per frame is too fast)
val BLOCKCOUNT 12
val CLOUDSPEED 10  ; clouds move by 1 pixel every CLOUDSPEED frames
val COORDSTRX 4    ; addresses of where numbers are placed into the coordstr string
val COORDSTRY 11

val playerx 0xF000
val playery 0xF001
val curblock 0xF002
val worldready 0xF003   ; if 0, world is not ready and needs to be generated
val framecount 0xF004
val scrollcount 0xF005  ; for scrolling clouds
val blocks 0xF01D       ; starting address of block array
val zdowntime 0xE000    ; how long Z/X have been down for (to prevent key repeat)
val xdowntime 0xE001
val mousexblock 0xE002  ; what block coordinates is the mouse pointing at
val mouseyblock 0xE003

.include examples/blockgame/worldgen.gxs

main:
	set %0 1           ; enable SRAM to save worlds
	st %0 SRAM_TOGGLE

	ld %0 worldready   ; generate world if not generated yet
	set %1 0
	.eqjs %0 %1 genworld

.include examples/blockgame/update.gxs
.include examples/blockgame/render.gxs