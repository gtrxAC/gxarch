update:
	ld %0 framecount  ; only allow moving every 4th frame
	set %1 SPEED
	div %0 %1 %29
	set %0 0
	cj %r getmouseblock

	set %1 0
	set %2 1
	set %5 WWIDTH
	set %7 BLOCKCOUNT
	set %8 WHEIGHT
	set %9 13
	sub %5 %9 %5
	sub %8 %9 %8

	set %0 0x77  ; if W is down, go up
	key %0 %3
	.eqj %3 %1 nomoveup

	ld %4 playery
	.eqj %4 %1 nomoveup
	sub %4 %2 %4
	st %4 playery

nomoveup:
	set %0 0x61  ; if A is down, go left
	key %0 %3
	.eqj %3 %1 nomoveleft

	ld %4 playerx
	.eqj %4 %1 nomoveleft
	sub %4 %2 %4
	st %4 playerx

nomoveleft:
	set %0 0x73  ; if S is down, go down
	key %0 %3
	.eqj %3 %1 nomovedown
	
	ld %4 playery
	add %4 %2 %4
	.gtj %4 %8 nomovedown
	st %4 playery

nomovedown:
	set %0 0x64  ; if D is down, go right
	key %0 %3
	.eqj %3 %1 checkprevblock

	ld %4 playerx
	add %4 %2 %4
	.gtj %4 %5 checkprevblock
	st %4 playerx

checkprevblock:
	.keyj 0x7a prevblock  ; if Z is pressed, select previous block
	jmp noprevblock
prevblock:
	ld %0 zdowntime
	cj %0 checknextblock

	ld %4 curblock
	.eqj %4 %2 checknextblock
	sub %4 %2 %4
	st %4 curblock

	ld %0 zdowntime  ; increment counter
	add %0 %2 %0
	st %0 zdowntime
	jmp checknextblock
noprevblock:
	st %1 zdowntime

checknextblock:
	.keyj 0x78 nextblock  ; if X is pressed, select next block
	jmp nonextblock
nextblock:
	ld %0 xdowntime
	cj %0 getmouseblock

	ld %4 curblock
	add %4 %2 %4
	.eqj %4 %7 getmouseblock
	st %4 curblock

	ld %0 xdowntime  ; increment counter
	add %0 %2 %0
	st %0 xdowntime
	jmp getmouseblock
nonextblock:
	st %1 xdowntime

getmouseblock:
	set %2 BLOCKSIZE  ; get the block that the mouse is pointing at
	ld %0 MOUSEX
	div %0 %2 %0
	ld %1 playerx
	add %0 %1 %0
	st %0 mousexblock

	ld %0 MOUSEY
	div %0 %2 %0
	ld %1 playery
	add %0 %1 %0
	st %0 mouseyblock

	ld %0 MOUSEL        ; if left mouse is down, replace pointed block with air
	cjs %0 removeblock
	ld %0 MOUSER        ; if right mouse is down, replace pointed block with current block
	cjs %0 placeblock
	jmp render

removeblock:
	js getblockaddr
	set %4 0
	sti %4 %0
	ret

placeblock:
	js getblockaddr
	ld %4 curblock
	sti %4 %0
	ret

getblockaddr:
	set %0 hi(blocks)  ; block address = starting address
	set %1 lo(blocks)

	ld %2 mouseyblock  ; block address += mouse y block * world width
	set %3 WWIDTH
	mul %2 %3 %2
	add %0 %h %0
	add %1 %2 %1

	ld %2 mousexblock  ; block address += mouse x block
	add %1 %2 %1
	add %0 %h %0
	ret