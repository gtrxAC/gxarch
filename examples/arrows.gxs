; Arrows for gxarch
; Move a character with the arrow keys
; Date: 2021-12-27
; Author: gtrxAC

datl main    ; set program entry point
dat 0, 0, 0  ; set screen clear color (black)
dat 0        ; doesn't support save file

enablestr: dat "Left mouse: enable rollover"
disablestr: dat "Left mouse: disable rollover"

val PRINT_CHARSPERLINE 32
val PRINT_WIDTH 4
val PRINT_HEIGHT 8
include "std/common.gxs"
include "std/print.gxs"
include "std/mouse.gxs"

; Constants for player facing directions, these are also source X values for the
; player sprite
val D_LEFT 0
val D_DOWN 16
val D_RIGHT 32
val D_UP 48

main:
	reg pX %4     ; player X/Y, default middle of screen
	reg pY %5
	reg ro %6     ; is rollover enabled? 1 = yes, 0 = no
	reg dir %7    ; player facing direction, see D_* constants above
	reg SCRSZ %8  ; screen size, constant 128

	set pX 56
	set pY 56
	set ro 0
	set SCRSZ 128

; ______________________________________________________________________________
;
;  Check if any keys are pressed and move the player accordingly
; ______________________________________________________________________________
;
loop:
	js updatemouse
	ld %0 MOUSELPRESS
	cjs %0 togglerollover

	set %0 0
	set %1 1
	set %2 112
	keyjs K_w moveup
	keyjs K_a moveleft
	keyjs K_s movedown
	keyjs K_d moveright
	keyjs K_W moveup
	keyjs K_A moveleft
	keyjs K_S movedown
	keyjs K_D moveright
	keyjs K_UP moveup
	keyjs K_LEFT moveleft
	keyjs K_DOWN movedown
	keyjs K_RIGHT moveright

; ______________________________________________________________________________
;
;  Draw background
;  The background is a vertically repeating pattern defined in the top 8
;  pixels of the tileset, above the font.
;
;  %10 = current Y to draw at
;  %11 = increment and draw height, constant 8
;  %12 = constant 0
; ______________________________________________________________________________
;
draw: {
	reg y %10
	reg inc %11
	reg _0 %12

	set y 0
	set inc 8
	set _0 0
drawbgloop:
	dw _0 _0 SCRSZ inc
	at _0 y

	add y inc y
	ltj y SCRSZ drawbgloop
}

; ______________________________________________________________________________
;
;  Draw player and end frame
;
;  %10 = draw source Y, constant 32
;  %11 = player size, constant 16
; ______________________________________________________________________________
;
{
	reg SY %10
	reg PSZ %11

	dw dir (SY:32) (PSZ:16) PSZ
	at pX pY

	js drawtext
	end
	jmp loop
}

; ______________________________________________________________________________
;
;  Draw "Left mouse: enable/disable rollover" text
; ______________________________________________________________________________
;
drawtext:
	set arg2 0       ; set draw X/Y to 0, these are the same regardless of which
	set arg3 0       ; string we are printing
	cj ro drawtext2  ; if rollover is enabled, draw the "disable" string instead

	set arg0 hi(enablestr)
	set arg1 lo(enablestr)
	js print
	ret
drawtext2:
	set arg0 hi(disablestr)
	set arg1 lo(disablestr)
	js print
	ret

; ______________________________________________________________________________
;
;  Player movement subroutines
;  Note: registers are set in main loop before calling these subroutines
;
;  %0 = constant 0
;  %1 = movement speed, constant 1
;  %2 = screen size - player size, constant 112
; ______________________________________________________________________________
;
{
reg _0 %0
reg spd %1
reg _112 %2

moveup:
	set dir D_UP         ; set sprite movement direction
	sub pY spd pY        ; decrement player Y
	eqj pY _0 moveupend  ; if Y reached 0, goto moveupend
	ret
moveupend:
	cj ro moveupro  ; if rollover is enabled, goto moveupro
	add pY spd pY   ; else, cancel movement
	ret
moveupro:
	mov _112 pY  ; roll over to bottom of screen
	ret

movedown:
	set dir D_DOWN
	add pY spd pY
	gtj pY _112 movedownend
	ret
movedownend:
	cj ro movedownro
	sub pY spd pY
	ret
movedownro:
	set pY 1
	ret

moveleft:
	set dir D_LEFT
	sub pX spd pX
	eqj pX _0 moveleftend
	ret
moveleftend:
	cj ro moveleftro
	add pX spd pX
	ret
moveleftro:
	mov _112 pX
	ret

moveright:
	set dir D_RIGHT
	add pX spd pX
	gtj pX _112 moverightend
	ret
moverightend:
	cj ro moverightro
	sub pX spd pX
	ret
moverightro:
	set pX 1
	ret
}

togglerollover:
	xor ro %0 ro
	ret