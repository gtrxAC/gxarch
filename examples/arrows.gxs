; Arrows for gxarch
; Move a character with the arrow keys
; Date: 2021-12-27
; Author: gtrxAC

dat main

enablestr: dat "Left mouse: enable rollover"
disablestr: dat "Left mouse: disable rollover"

val PRINT_CHARSPERLINE 32
val PRINT_WIDTH 4
val PRINT_HEIGHT 8
.include std/common.gxs
.include std/print.gxs
.include std/mouse.gxs

val D_LEFT 0    ; constants for player facing directions
val D_DOWN 16   ; these are also source X values for the player sprite
val D_RIGHT 32
val D_UP 48

main:
	; %4 = player X, default middle of screen
	; %5 = player Y
	; %6 = is rollover enabled? 1 = yes, 0 = no
	; %7 = player facing direction
	; %8 = screen size, constant 128
	; %9 = frame counter
	set %4 56
	set %5 56
	set %6 0
	set %8 128
	set %9 0

; ______________________________________________________________________________
;
;  Check if any keys are pressed and move the player accordingly
; ______________________________________________________________________________
;
loop:
	js updatemouse
	ld %0 MOUSELPRESS
	cjs %0 togglerollover

	set %0 0
	set %1 1
	set %2 112
	.keyjs lo(K_w) moveup
	.keyjs lo(K_a) moveleft
	.keyjs lo(K_s) movedown
	.keyjs lo(K_d) moveright
	.keyjs lo(K_W) moveup
	.keyjs lo(K_A) moveleft
	.keyjs lo(K_S) movedown
	.keyjs lo(K_D) moveright
	.keyjs lo(K_UP) moveup
	.keyjs lo(K_LEFT) moveleft
	.keyjs lo(K_DOWN) movedown
	.keyjs lo(K_RIGHT) moveright

; ______________________________________________________________________________
;
;  Draw background
;  The background is a vertically repeating pattern defined in the top 8
;  pixels of the tileset, above the font.
;
;  %10 = current Y to draw at
;  %11 = increment and draw height, constant 8
;  %12 = constant 0
; ______________________________________________________________________________
;
draw:
	set %10 0
	set %11 8
	set %12 0
drawbgloop:
	dw %12 %12 %8 %11
	at %12 %10

	add %10 %11 %10
	.ltj %10 %8 drawbgloop

; ______________________________________________________________________________
;
;  Draw player and end frame
;
;  %10 = draw source Y, constant 32
;  %11 = player size, constant 16
; ______________________________________________________________________________
;
	set %10 32
	set %11 16

	dw %7 %10 %11 %11
	at %4 %5

	js drawtext

	set %0 1      ; increment frame counter and draw frame
	add %9 %0 %9
	end
	jmp loop

; ______________________________________________________________________________
;
;  Draw "Left mouse: enable/disable rollover" text
; ______________________________________________________________________________
;
drawtext:
	set %22 0        ; set draw X/Y to 0, these are the same regardless of which
	set %23 0        ; string we are printing
	cj %6 drawtext2  ; if rollover is enabled, draw the "disable" string instead

	set %20 hi(enablestr)
	set %21 lo(enablestr)
	js print
	ret
drawtext2:
	set %20 hi(disablestr)
	set %21 lo(disablestr)
	js print
	ret

; ______________________________________________________________________________
;
;  Player movement subroutines
;  Note: registers are set in main loop before calling these subroutines
;
;  %0 = constant 0
;  %1 = movement speed, constant 1
;  %2 = screen size - player size, constant 112
; ______________________________________________________________________________
;
moveup:
	set %7 lo(D_UP)       ; set sprite movement direction
	sub %5 %1 %5          ; decrement player Y
	.eqj %5 %0 moveupend  ; if Y reached 0, goto moveupend
	ret
moveupend:
	cj %6 moveupro  ; if rollover is enabled, goto moveupro
	add %5 %1 %5    ; else, cancel movement
	ret
moveupro:
	.mov %2 %5  ; roll over to bottom of screen
	ret
	
movedown:
	set %7 lo(D_DOWN)
	add %5 %1 %5
	.gtj %5 %2 movedownend
	ret
movedownend:
	cj %6 movedownro
	sub %5 %1 %5
	ret
movedownro:
	set %5 1
	ret
	
moveleft:
	set %7 lo(D_LEFT)
	sub %4 %1 %4
	.eqj %4 %0 moveleftend
	ret
moveleftend:
	cj %6 moveleftro
	add %4 %1 %4
	ret
moveleftro:
	.mov %2 %4
	ret
	
moveright:
	set %7 lo(D_RIGHT)
	add %4 %1 %4
	.gtj %4 %2 moverightend
	ret
moverightend:
	cj %6 moverightro
	sub %4 %1 %4
	ret
moverightro:
	set %4 1
	ret

togglerollover:
	xor %6 %0 %6
	ret