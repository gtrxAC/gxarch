; ______________________________________________________________________________
;
;  Button
;  Draws a button with a different image depending on if it's hovered or
;  pressed, and returns true if it's pressed.
;
;  Arguments:
;    %20 = X location
;    %21 = Y location
;    %22 = image source X
;    %23 = image source Y
;    %24 = image source width
;    %25 = image source height
;    %26 = return value (has the button been pressed), you can also use btndown
;
;  Notes:
;  - The button images should be stacked on top of each other in the tileset,
;    the hovered button under the normal button and the pressed button under the
;    hovered button.
; ______________________________________________________________________________
;
include "std/common.gxs"
reg btndown arg6

button: {
	reg x arg0
	reg y arg1
	reg sx arg2
	reg sy arg3
	reg w arg4
	reg h arg5

	set btndown 0

	; If mouse X is not inside the button, draw the first frame (skip to drawing
	; the button without incrementing the source Y)
	ltj [%0:MOUSEX] x button_draw

	add x w %1
	gtj %0 %1 button_draw

	; If mouse Y is not inside the button, draw the first frame
	ltj [%0:MOUSEY] y button_draw

	add y h %1
	gtj %0 %1 button_draw

	; If left mouse is down, draw the third frame
	cj [%0:MOUSEL] button_down

	; If left mouse is pressed, draw the third frame and set btndown to 1
	cj [%0:MOUSELPRESS] button_press

	; At this point, mouse is inside the button but not pressed, so it's
	; hovered, draw the second frame
	add sy h sy
	jmp button_draw

button_press:
	set btndown 1

button_down:
	add sy h sy
	add sy h sy

button_draw:
	dw sx sy w h
	at x y
	ret
}