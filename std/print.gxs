; ______________________________________________________________________________
;
;  Print subroutine
;
;  Arguments:
;    %20 %21 = address of string to print
;    %22 = X position to print at
;    %23 = Y position
;
;  Constants (need to be defined before including this file):
;    PRINT_CHARSPERLINE = how many chars are on each line in the tileset
;    PRINT_WIDTH = width of each character
;    PRINT_HEIGHT = height of each character
;
;  Uses registers:
;    %24 = current character being printed
;    %25 = character source X position in tileset
;    %26 = character source Y
;
;  Notes:
;  - In the tileset, the characters must start at (0, 0), in ASCII order,
;    starting at null (the first row is empty, assuming PRINT_WIDTH = 4).
;    You should use the default tileset assets/tileset.png as a base for your
;    own tileset if you're using the default parameters (32 chars per line,
;    width 4, height 8).
;  - This subroutine doesn't do line wrapping, everything is drawn on one line.
;  - The registers %20 %21 %22 are overwritten, copy them to other registers
;    using the mov macro if you need to use them after calling print.
; ______________________________________________________________________________
;
include "std/common.gxs"

print: {
	reg strh arg0    ; address of string, high byte
	reg strl arg1    ; low byte
	reg x arg2       ; X print location (gets overwritten)
	reg y arg3       ; Y print location
	reg curchar %24  ; current character value being drawn
	reg sx %25       ; current char X location in tileset
	reg sy %26       ; current char Y location in tileset

	ldi curchar strh                 ; load character
	eqj curchar (%0:0x7F) printskip  ; if char is 0x7F, skip
	cj curchar printdraw             ; if not null term, continue
	ret

printdraw:
	div curchar (%0:PRINT_CHARSPERLINE) sy  ; source Y = char / chars per line
	mov %r sx                               ; source X = division remainder

	set %0 PRINT_WIDTH
	set %1 PRINT_HEIGHT
	mul sx %0 sx         ; source X *= character width
	mul sy %1 sy         ; source Y *= character height

	; Draw character
	dw sx sy %0 %1
	at x y

	; Next character cell
	add x %0 x

printskip:
	; Go to next character
	add strl (%2:1) strl
	add strh %h strh
	jmp print
}