; ______________________________________________________________________________
;
;  gxarch standard library - printing
;
;  Include default_font.gxs or define your own font properties before including
;  this file.
;
;  Notes:
;  - In the tileset, the characters must start at (0, 0), in ASCII order,
;    starting at space (the first ASCII printable character).
;  - This function doesn't do line wrapping, everything is drawn on one line.
; ______________________________________________________________________________
;
include "std/common.gxs"

; ______________________________________________________________________________
;
;  print strH strL x y
;  Prints the string at address strH strL on the screen at (x, y).
;
;  strH strL: the address which contains the string to print (high, low byte)
;  x: the X position to draw at
;  y: the Y position to draw at
; ______________________________________________________________________________
;
print: {
	args strH, strL, x, y
	vars curChar

	; load the next character and draw it, stop if it's a null terminator
	ld curChar [strH]
	cj curChar printDraw
	ret

printDraw:
	; print the character and move to the next character cell
	arg [curChar], [x], [y]
	call printChar
	add [x] [rVal] x

	; next character
	add [strL] 1 strL
	add [strH] [resH] strH
	jmp print
}

; ______________________________________________________________________________
;
;  printChar char x y
;  Prints a single character on the screen at (x, y). Used as a base for other
;  print functions.
;
;  char: the character to print
;  x: the X position to draw at
;  y: the Y position to draw at
; ______________________________________________________________________________
;
printChar: {
	args char, x, y
	vars widthH, widthL, width, sx, sy

	;subtract 32 from the character, ASCII printable characters start at 32
	sub [char] 32 char

	; get the character's position in the tileset
	div [char] PRINT_CHARSPERLINE sy
	mod [char] PRINT_CHARSPERLINE sx

	mul [sx] PRINT_WIDTH sx
	mul [sy] PRINT_HEIGHT sy

	; get the character's width
	set widthH hi(printCharWidths)
	set widthL lo(printCharWidths)
	add [widthL] [char] widthL
	add [widthH] [resH] widthH
	ld width [widthH]

	; draw the character
	arg [sx], [sy], [width], PRINT_HEIGHT, [x], [y]
	sys SYS_DRAW
	retv [width]
	ret
}